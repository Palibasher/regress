import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ C5TC")

st.title("üìä –ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –º–æ–¥–µ–ª—å –ø–æ C5TC")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ---
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])
if uploaded_file:

    try:
        df = pd.read_excel(uploaded_file)
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        df['–ú–µ—Å—è—Ü'] = pd.to_datetime(df['–ú–µ—Å—è—Ü'])

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º C5TC
        df = df.dropna(subset=["C5TC"])

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        df['–ì–æ–¥'] = df['–ú–µ—Å—è—Ü'].dt.year
        df['–ú–µ—Å—è—Ü_—á–∏—Å–ª–æ–º'] = df['–ú–µ—Å—è—Ü'].dt.month
        df['–î–µ–Ω—å'] = df['–ú–µ—Å—è—Ü'].dt.day

        df_f = df.drop(columns=['–ú–µ—Å—è—Ü'])

        st.session_state['df_raw'] = df.copy()
        st.session_state['df_f'] = df_f.copy()

        st.write("üìã –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:")
        st.dataframe(df_f.head())

        st.success("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")


# --- –®–∞–≥ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ (IQR –º–µ—Ç–æ–¥) ---
st.markdown("### üîç –®–∞–≥ 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤ (IQR –º–µ—Ç–æ–¥)")

df_f = st.session_state.get('df_f')

if df_f is not None:
    numeric_cols = df_f.select_dtypes(include='number').columns.tolist()
    selected_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤", numeric_cols,
                                index=numeric_cols.index("C5TC") if "C5TC" in numeric_cols else 0)
    iqr_multiplier = st.slider("–ú–Ω–æ–∂–∏—Ç–µ–ª—å IQR", 1.0, 3.0, 1.5, 0.1, key="iqr_slider")

    # IQR –∞–Ω–∞–ª–∏–∑ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É
    Q1 = df_f[selected_col].quantile(0.25)
    Q3 = df_f[selected_col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - iqr_multiplier * IQR
    upper_bound = Q3 + iqr_multiplier * IQR
    outliers = df_f[(df_f[selected_col] < lower_bound) | (df_f[selected_col] > upper_bound)]

    st.write(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ {selected_col}: **{len(outliers)}**")

    fig, ax = plt.subplots(figsize=(10, 4))
    sns.boxplot(y=df_f[selected_col], ax=ax)
    ax.set_title(f"Boxplot: {selected_col}")
    st.pyplot(fig)

    # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –ø–æ IQR
    Q1_all = df_f[numeric_cols].quantile(0.25)
    Q3_all = df_f[numeric_cols].quantile(0.75)
    IQR_all = Q3_all - Q1_all
    lower_all = Q1_all - iqr_multiplier * IQR_all
    upper_all = Q3_all + iqr_multiplier * IQR_all

    mask = ~((df_f[numeric_cols] < lower_all) | (df_f[numeric_cols] > upper_all)).any(axis=1)
    removed_data = df_f[~mask]
    cleaned_df = df_f[mask]

    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –æ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ (IQR)", key="iqr_clean"):
        st.session_state.removed_data = removed_data
        st.session_state.num_removed = len(df_f) - len(cleaned_df)
        st.session_state.df_filtered = cleaned_df.copy()
        st.success(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏: {st.session_state.num_removed}")
        with st.expander("üìÑ –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏"):
            st.dataframe(st.session_state.removed_data)

# --- –®–∞–≥ 3: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ---
st.markdown("### üî¨ –®–∞–≥ 3: –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

df_filtered = st.session_state.get('df_filtered')

if df_filtered is not None:
    corr_matrix = df_filtered.corr(numeric_only=True)
    show_only_c5tc = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å C5TC", value=True)

    if show_only_c5tc and "C5TC" in corr_matrix.columns:
        c5_corr = corr_matrix["C5TC"].drop("C5TC").sort_values(key=lambda x: abs(x), ascending=False)
        st.write("üìä **–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å C5TC:**")
        st.dataframe(c5_corr.to_frame(name="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è").style.background_gradient(cmap='coolwarm', axis=0))
    else:
        st.write("üìà –ü–æ–ª–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
        fig, ax = plt.subplots(figsize=(12, 8))
        sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap="coolwarm", center=0, square=True, linewidths=0.5, ax=ax)
        st.pyplot(fig)

    st.markdown(
        "üîç **–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏, –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏–µ —Å C5TC, –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å —Å–∏–ª—å–Ω–æ–π –≤–∑–∞–∏–º–Ω–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π.**")

st.markdown("### üß™ –®–∞–≥ 4: –û—Ç–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏")

df_filtered = st.session_state.get('df_filtered')

if df_filtered is not None:
    # –í—ã—á–∏—Å–ª–∏–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å C5TC
    corr_matrix = df_filtered.corr(numeric_only=True)
    corr_with_c5tc = corr_matrix["C5TC"].drop("C5TC").sort_values(key=lambda x: abs(x), ascending=False)

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ—Ä–æ–≥ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.8)
    correlation_threshold = 0.8
    high_corr_pairs = []

    # –ò—â–µ–º –ø–∞—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π
    for col1 in corr_matrix.columns:
        for col2 in corr_matrix.columns:
            if col1 != col2 and abs(corr_matrix[col1][col2]) > correlation_threshold:
                high_corr_pairs.append((col1, col2, corr_matrix[col1][col2]))

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, (A, B) –∏ (B, A))
    high_corr_pairs = sorted(set(tuple(sorted(pair[:2])) + (pair[2],) for pair in high_corr_pairs), key=lambda x: x[2],
                             reverse=True)

    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–∏–ª—å–Ω—ã—Ö –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    if high_corr_pairs:
        st.markdown(
            "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π. –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ:")
        for pair in high_corr_pairs:
            st.write(f"- –ü—Ä–∏–∑–Ω–∞–∫–∏ **{pair[0]}** –∏ **{pair[1]}** –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é: **{pair[2]:.2f}**")
    else:
        st.success("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π > 0.8).")

    st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏")

    # –°–æ–∑–¥–∞—ë–º –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    col1, col2 = st.columns(2)

    selected_features = []

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π —Å C5TC
    with col1:
        for i, (feature, corr_value) in enumerate(corr_with_c5tc.items()):
            if i % 2 == 0:  # –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                checkbox_label = f"{feature} ({corr_value:.2f})"
                if st.checkbox(checkbox_label, value=True, key=f"feature_{feature}"):
                    selected_features.append(feature)

    with col2:
        for i, (feature, corr_value) in enumerate(corr_with_c5tc.items()):
            if i % 2 != 0:  # –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                checkbox_label = f"{feature} ({corr_value:.2f})"
                if st.checkbox(checkbox_label, value=True, key=f"feature_{feature}"):
                    selected_features.append(feature)

    if selected_features:
        st.success(f"–í—ã–±—Ä–∞–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(selected_features)}")
        st.write("üìå –≠—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –º–æ–¥–µ–ª–∏:")
        st.code(", ".join(selected_features))

        # –û–±–Ω–æ–≤–∏–º session_state
        st.session_state.selected_features = selected_features
    else:
        st.warning("‚ùó –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")

# --- –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ ---
st.markdown("### üßπ –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤")

# –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
selected_features = st.session_state.get('selected_features')

if selected_features:
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    df_selected = df_filtered[selected_features]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
    missing_data = df_selected.isnull().sum()

    # –ü–æ–∫–∞–∂–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
    st.write("üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–∏–∑–Ω–∞–∫–µ:")
    st.write(missing_data[missing_data > 0])

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Ö
    if missing_data.any():
        st.markdown("üîß –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏?")

        # –û–ø—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        option = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤:",
            ("–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –º–µ–¥–∏–∞–Ω–æ–π")
        )

        if option == "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏":
            df_cleaned = df_selected.dropna()
            st.session_state.df_cleaned = df_cleaned
            st.success(f"–£–¥–∞–ª–µ–Ω–æ {len(df_selected) - len(df_cleaned)} —Å—Ç—Ä–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏.")

        elif option == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –º–µ–¥–∏–∞–Ω–æ–π":
            df_imputed = df_selected.fillna(df_selected.median())
            st.session_state.df_cleaned = df_imputed
            st.success("–ü—Ä–æ–ø—É—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –º–µ–¥–∏–∞–Ω–æ–π.")

    else:
        st.success("–ù–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.")
else:
    st.warning("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# --- –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ / –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
st.markdown("### ‚öôÔ∏è –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
if "selected_features" not in st.session_state or not st.session_state.selected_features:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.")
    st.stop()

if "df_cleaned" not in st.session_state:
    st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –≤—ã–±—Ä–æ—Å–æ–≤ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–ø—É—Å–∫–æ–≤.")
    st.stop()

use_scaling = st.checkbox("üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ/–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∫ –ø—Ä–∏–∑–Ω–∞–∫–∞–º", value=False)

scaling_method = None
if use_scaling:
    scaling_method = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è:",
        ("–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è (StandardScaler)", "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (MinMaxScaler)"),
        help=(
            "‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è: –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Å –Ω—É–ª–µ–≤—ã–º —Å—Ä–µ–¥–Ω–∏–º –∏ –µ–¥–∏–Ω–∏—á–Ω—ã–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º.\n"
            "‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]."
        )
    )

    from sklearn.preprocessing import StandardScaler, MinMaxScaler

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    df_for_scaling = st.session_state.get("df_cleaned", df_selected).copy()
    scaler = StandardScaler() if scaling_method == "–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è (StandardScaler)" else MinMaxScaler()
    df_for_scaling[selected_features] = scaler.fit_transform(df_for_scaling[selected_features])

    st.session_state.df_scaled = df_for_scaling
    st.success(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é: {scaling_method}")
    with st.expander("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–µ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"):
        st.dataframe(df_for_scaling.head())
else:
    # –ë–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    st.session_state.df_scaled = st.session_state.get("df_cleaned", df_selected).copy()

# --- –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ---
st.markdown("### üß† –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
model_choice = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", ["–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è", "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å", "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥"], horizontal=True)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df_model = st.session_state.df_scaled.copy()
y = df_filtered["C5TC"].loc[df_model.index]  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
X = df_model[selected_features]
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error

# –†–∞–∑–¥–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

if model_choice == "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
    from sklearn.linear_model import LinearRegression
    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # –í—ã—á–∏—Å–ª–∏–º –º–µ—Ç—Ä–∏–∫–∏
    r2 = r2_score(y_test, y_pred)
    n = len(y_test)
    p = X_test.shape[1]
    adj_r2 = 1 - (1 - r2) * (n - 1) / (n - p - 1)
    std_error = np.sqrt(mean_squared_error(y_test, y_pred))

    y_mean = np.mean(y_test)
    sst = np.sum((y_test - y_mean) ** 2)
    ssr = np.sum((y_pred - y_mean) ** 2)
    sse = np.sum((y_test - y_pred) ** 2)

    msr = ssr / p
    mse = sse / (n - p - 1)
    f_stat = msr / mse

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
    st.markdown(f"""
        - **R¬≤:** {r2:.3f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **R¬≤** (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏) ‚Äî —ç—Ç–æ –º–µ—Ä–∞ —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –º–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö. –ó–Ω–∞—á–µ–Ω–∏–µ R¬≤ –±–ª–∏–∑–∫–æ–µ –∫ 1 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –º–æ–¥–µ–ª—å —Ö–æ—Ä–æ—à–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ, –±–ª–∏–∑–∫–æ–µ –∫ 0 ‚Äî —á—Ç–æ –º–æ–¥–µ–ª—å –Ω–µ –æ–±—ä—è—Å–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.
        """)

    st.markdown(f"""
        - **–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π R¬≤ (Adjusted R¬≤):** {adj_r2:.3f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **–ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π R¬≤** —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏. –ï–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ R¬≤.
        """)

    st.markdown(f"""
        - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:** {std_error:.3f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞** ‚Äî —ç—Ç–æ –º–µ—Ä–∞ —Ä–∞–∑–±—Ä–æ—Å–∞ –æ—à–∏–±–æ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏. –ß–µ–º –º–µ–Ω—å—à–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.
        """)

    st.markdown(f"""
        - **SST (–û–±—â–∞—è —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤):** {sst:.2f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **SST** (Total Sum of Squares) ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –≤—Å–µ—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –≤–µ–ª–∏—á–∏–Ω—ã —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –≠—Ç–æ –æ–±—â–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö.
        """)

    st.markdown(f"""
        - **SSR (–°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏):** {ssr:.2f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **SSR** (Sum of Squares for Regression) ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–π –≤–µ–ª–∏—á–∏–Ω—ã —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ß–µ–º –±–æ–ª—å—à–µ —ç—Ç–∞ —Å—É–º–º–∞, —Ç–µ–º –ª—É—á—à–µ –º–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ.
        """)

    st.markdown(f"""
        - **SSE (–°—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—à–∏–±–æ–∫):** {sse:.2f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **SSE** (Sum of Squared Errors) ‚Äî —ç—Ç–æ —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö. –ú–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ SSE –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å —Ç–æ—á–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ.
        """)

    st.markdown(f"""
        - **MSR (–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏):** {msr:.3f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **MSR** ‚Äî —ç—Ç–æ —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏, —Ç–æ –µ—Å—Ç—å SSR, –¥–µ–ª–µ–Ω–Ω–∞—è –Ω–∞ —Å—Ç–µ–ø–µ–Ω–∏ —Å–≤–æ–±–æ–¥—ã –º–æ–¥–µ–ª–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤). –≠—Ç–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ–≥–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–æ –º–æ–¥–µ–ª—å –æ–±—ä—è—Å–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ä–µ–¥–Ω–µ–º.
        """)

    st.markdown(f"""
        - **MSE (–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏):** {mse:.3f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **MSE** (Mean Squared Error) ‚Äî —ç—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö. –ú–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MSE –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç –º–µ–Ω—å—à–∏–µ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö.
        """)

    st.markdown(f"""
        - **F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {f_stat:.2f}
        """)
    with st.expander("–ß—Ç–æ —ç—Ç–æ?"):
        st.write("""
        **F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** ‚Äî —ç—Ç–æ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏. –ï—Å–ª–∏ F-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã—Å–æ–∫–∞—è, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è MSR –∫ MSE.
        """)


elif model_choice == "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å":
    from sklearn.ensemble import RandomForestRegressor
    from sklearn.metrics import mean_absolute_error
    import matplotlib.pyplot as plt

    model = RandomForestRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # –ú–µ—Ç—Ä–∏–∫–∏
    r2 = r2_score(y_test, y_pred)
    std_error = np.sqrt(mean_squared_error(y_test, y_pred))
    mae = mean_absolute_error(y_test, y_pred)

    # –í—ã–≤–æ–¥
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ –°–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞")
    st.markdown(f"""
    - **R¬≤:** {r2:.3f}
    - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (RMSE):** {std_error:.3f}
    - **–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE):** {mae:.3f}
    """)


    # --- üìå –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
    st.markdown("### üß† –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Feature Importance)")
    feature_importance = pd.Series(model.feature_importances_, index=X_train.columns)
    feature_importance_sorted = feature_importance.sort_values(ascending=True)

    fig2, ax2 = plt.subplots(figsize=(8, 5))
    feature_importance_sorted.plot(kind='barh', ax=ax2)
    ax2.set_title("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –≤–µ—Ä—Å–∏–∏ Random Forest")
    st.pyplot(fig2)

elif model_choice == "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥":
    from sklearn.ensemble import GradientBoostingRegressor
    model = GradientBoostingRegressor(random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    # –í—ã—á–∏—Å–ª–∏–º –º–µ—Ç—Ä–∏–∫–∏
    r2 = r2_score(y_test, y_pred)
    std_error = np.sqrt(mean_squared_error(y_test, y_pred))

    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏ –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞")
    st.markdown(f"""
    - **R¬≤:** {r2:.3f}
    - **–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:** {std_error:.3f}
    """)

# –û–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
st.markdown("üìä <b>–ì—Ä–∞—Ñ–∏–∫: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</b>", unsafe_allow_html=True)

fig, ax = plt.subplots()
ax.scatter(y_test, y_pred, alpha=0.6)
ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
ax.set_xlabel("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
ax.set_ylabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
ax.set_title(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ ({model_choice})")
st.pyplot(fig)


import seaborn as sns

with st.expander("üìä Density Plot of Real vs Predicted C5TC"):
    st.markdown("–ü–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π C5TC.")
    fig_kde, ax_kde = plt.subplots(figsize=(8, 4))
    sns.kdeplot(y_test, label="–†–µ–∞–ª—å–Ω—ã–µ", ax=ax_kde, fill=True, color='blue', alpha=0.5)
    sns.kdeplot(y_pred, label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ", ax=ax_kde, fill=True, color='orange', alpha=0.5)
    ax_kde.set_title("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: Real vs Predicted C5TC")
    ax_kde.legend()
    st.pyplot(fig_kde)
