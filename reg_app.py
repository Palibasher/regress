import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
import numpy as np
from io import BytesIO
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import make_pipeline

@st.cache_data
def load_and_process_data(uploaded_file):
    df = pd.read_excel(uploaded_file)
    df['–ú–µ—Å—è—Ü'] = pd.to_datetime(df['–ú–µ—Å—è—Ü'], format='%d.%m.%Y')
    return df

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª", type=["xlsx"])
if uploaded_file:
    df = load_and_process_data(uploaded_file)
    df = df.sort_values('–ú–µ—Å—è—Ü').reset_index(drop=True)

    df['–ì–æ–¥'] = df['–ú–µ—Å—è—Ü'].dt.year
    df['–ú–µ—Å—è—Ü_–Ω–æ–º–µ—Ä'] = df['–ú–µ—Å—è—Ü'].dt.month

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ—Ç
    if 'removed_data' not in st.session_state:
        st.session_state.removed_data = pd.DataFrame()  # –ü—É—Å—Ç–æ–π DataFrame –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'num_removed' not in st.session_state:
        st.session_state.num_removed = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    if 'result_df' not in st.session_state:
        st.session_state.result_df = pd.DataFrame()

    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    if not numeric_cols:
        st.warning("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
    else:
        selected_col = st.selectbox("**–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**", numeric_cols, key="column_selector")

        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        tab1, tab2, tab3 = st.tabs([
            "üìä –Ø—â–∏–∫ —Å —É—Å–∞–º–∏",
            "üìà Z-score –º–µ—Ç–æ–¥",
            "üìâ IQR –º–µ—Ç–æ–¥"
        ])

        # Boxplot (–Ø—â–∏–∫ —Å —É—Å–∞–º–∏)
        with tab1:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤: –Ø—â–∏–∫ —Å —É—Å–∞–º–∏ (Boxplot)")
            fig, ax = plt.subplots(figsize=(10, 4))
            sns.boxplot(y=df[selected_col], ax=ax)
            ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {selected_col}")
            st.pyplot(fig)

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤
            Q1 = df[selected_col].quantile(0.25)
            Q3 = df[selected_col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR

            outliers = df[(df[selected_col] < lower_bound) | (df[selected_col] > upper_bound)]
            st.metric("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤", len(outliers))

            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –ø–æ IQR
            mask = ~((df[numeric_cols] < (df[numeric_cols].quantile(0.25) - 1.5 * (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25)))) |
                     (df[numeric_cols] > (df[numeric_cols].quantile(0.75) + 1.5 * (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))))).any(axis=1)
            num_removed = len(df) - mask.sum()
            removed_data = df[~mask]

            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º (Boxplot)", key="boxplot_clean"):
                st.session_state.removed_data = removed_data
                st.session_state.num_removed = num_removed
                st.session_state.result_df = df[mask]

        # Z-score –º–µ—Ç–æ–¥
        with tab2:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤: Z-score –º–µ—Ç–æ–¥")
            threshold = st.slider("–ü–æ—Ä–æ–≥ Z-score", 2.0, 5.0, 3.0, 0.1, key="z_slider")

            scaler = StandardScaler()
            z_scores = scaler.fit_transform(df[[selected_col]])
            df['z_score'] = np.abs(z_scores)

            outliers = df[df['z_score'] > threshold]

            fig, ax = plt.subplots(figsize=(10, 4))
            sns.histplot(df['z_score'], bins=30, kde=True, ax=ax)
            ax.axvline(x=threshold, color='r', linestyle='--')
            ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Z-—Å–∫–æ—Ä–æ–≤ ({selected_col})")
            st.pyplot(fig)

            st.metric("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤ (Z > {threshold})", len(outliers))

            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –ø–æ Z-score
            z_scores_full = scaler.fit_transform(df[numeric_cols])
            mask = (np.abs(z_scores_full) <= threshold).all(axis=1)
            num_removed = len(df) - mask.sum()
            removed_data = df[~mask]

            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º (Z-score)", key="zscore_clean"):
                st.session_state.removed_data = removed_data
                st.session_state.num_removed = num_removed
                st.session_state.result_df = df[mask]


        # IQR –º–µ—Ç–æ–¥
        with tab3:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤: IQR –º–µ—Ç–æ–¥")
            iqr_multiplier = st.slider("–ú–Ω–æ–∂–∏—Ç–µ–ª—å IQR", 1.0, 3.0, 1.5, 0.1, key="iqr_slider")

            Q1 = df[selected_col].quantile(0.25)
            Q3 = df[selected_col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - iqr_multiplier * IQR
            upper_bound = Q3 + iqr_multiplier * IQR

            outliers = df[(df[selected_col] < lower_bound) | (df[selected_col] > upper_bound)]

            fig, ax = plt.subplots(figsize=(10, 4))
            df[selected_col].plot(kind='line', ax=ax, alpha=0.5)
            ax.scatter(outliers.index, outliers[selected_col], color='red')
            ax.axhline(y=upper_bound, color='r', linestyle='--')
            ax.axhline(y=lower_bound, color='r', linestyle='--')
            ax.set_title(f"–í—ã–±—Ä–æ—Å—ã –≤ {selected_col} (IQR –º–µ—Ç–æ–¥)")
            st.pyplot(fig)

            st.metric("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤", len(outliers))

            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –ø–æ IQR
            Q1_full = df[numeric_cols].quantile(0.25)
            Q3_full = df[numeric_cols].quantile(0.75)
            IQR_full = Q3_full - Q1_full
            lower_bound_full = Q1_full - iqr_multiplier * IQR_full
            upper_bound_full = Q3_full + iqr_multiplier * IQR_full

            mask = ~((df[numeric_cols] < lower_bound_full) | (df[numeric_cols] > upper_bound_full)).any(axis=1)
            num_removed = len(df) - mask.sum()
            removed_data = df[~mask]

            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º (IQR)", key="iqr_clean"):
                st.session_state.removed_data = removed_data
                st.session_state.num_removed = num_removed
                st.session_state.result_df = df[mask]

    if len(st.session_state.result_df) == 0:
        pass
    else:
        st.success(f"–£–¥–∞–ª–µ–Ω–æ {st.session_state.num_removed} —Å—Ç—Ä–æ–∫ —Å –≤—ã–±—Ä–æ—Å–∞–º–∏!")
        st.dataframe(st.session_state.removed_data)
        df = st.session_state.result_df
        if 'z_score' in df.columns:
            df = df.drop(columns=['z_score'])
        result = pd.DataFrame({
            '–°—Ç–æ–ª–±–µ—Ü': df.columns,
            '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤ (%)': df.isnull().mean() * 100
        })

        # –í—ã–≤–æ–¥–∏–º —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
        st.write(result.round(2))

        option = st.selectbox(
            '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏?',
            ['–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π', '–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏']
        )
        flag1 = False
        if option == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π':
            if st.button('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏ –º–µ–¥–∏–∞–Ω–æ–π'):
                flag1 = True
                df['AUSTRALIA-CHINA'] = df['AUSTRALIA-CHINA'].fillna(df['AUSTRALIA-CHINA'].median())
                df['AUSTRALIA-WORLD'] = df['AUSTRALIA-WORLD'].fillna(df['AUSTRALIA-WORLD'].median())
                df['PMI'] = df['PMI'].fillna(df['PMI'].median())
                df['BRAZIL-WORLD'] = df['BRAZIL-WORLD'].fillna(df['BRAZIL-WORLD'].median())
                df = df.drop(columns=['Boxit Guinea-China'])
                st.success("–ü—Ä–æ–ø—É—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –º–µ–¥–∏–∞–Ω–æ–π!")


        elif option == '–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏':
            if st.button('–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏'):
                flag1 = True
                df = df.dropna()
                st.success("–ü—Ä–æ–ø—É—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        if flag1:
            correlations = df.corr(numeric_only=True)['C5TC'].sort_values(ascending=False)
            st.subheader("üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å C5TC")
            st.dataframe(correlations.to_frame(name='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'), use_container_width=True)
            st.subheader("üîç –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")

            fig, ax = plt.subplots(figsize=(10, 8))
            sns.heatmap(df.corr(numeric_only=True), annot=True, fmt=".2f", cmap='coolwarm', ax=ax)
            st.pyplot(fig)



            columns_to_exclude = ['PMI', 'BRAZIL-WORLD', '–ú–µ—Å—è—Ü']
            df = df.drop(columns=columns_to_exclude)



            X = df.drop(columns=['C5TC'])  # –ü—Ä–∏–∑–Ω–∞–∫–∏
            y = df['C5TC']  # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

            # –†–∞–∑–¥–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



            # –°–æ–∑–¥–∞–¥–∏–º –∏ –æ–±—É—á–∏–º –º–æ–¥–µ–ª—å –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
            model = make_pipeline(
                StandardScaler(),
                LinearRegression()
            )
            model.fit(X_train, y_train)
            # model = LinearRegression()
            # model.fit(X_train, y_train)

            # –°–¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ
            y_pred = model.predict(X_test)

            # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
            mae = mean_absolute_error(y_test, y_pred)
            rmse = np.sqrt(mean_squared_error(y_test, y_pred))

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Streamlit
            st.write(f'Mean Absolute Error (MAE): {mae}')
            st.write(f'Root Mean Squared Error (RMSE): {rmse}')

            errors = y_test - y_pred

            # –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ—Ç–∏–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö
            st.subheader('Real vs Predicted C5TC (Line Plot)')
            plt.figure(figsize=(10, 6))
            plt.plot(y_test.reset_index(drop=True), label='Real Values', color='blue', alpha=0.7)
            plt.plot(y_pred, label='Predicted Values', color='red', alpha=0.7)
            plt.xlabel('Index')
            plt.ylabel('C5TC')
            plt.title('Real vs Predicted C5TC (Line Plot)')
            plt.legend()
            st.pyplot(plt)

            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –æ—à–∏–±–æ–∫
            st.subheader('Box Plot of Prediction Errors')
            plt.figure(figsize=(8, 6))
            sns.boxplot(x=errors)
            plt.title('Box Plot of Prediction Errors')
            plt.xlabel('Error')
            st.pyplot(plt)

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Ä–µ–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            st.subheader('Density Plot of Real vs Predicted C5TC')
            plt.figure(figsize=(8, 6))
            sns.kdeplot(y_test, label='Real Values', shade=True)
            sns.kdeplot(y_pred, label='Predicted Values', shade=True)
            plt.title('Density Plot of Real vs Predicted C5TC')
            plt.xlabel('C5TC')
            plt.ylabel('Density')
            plt.legend()
            st.pyplot(plt)

            print("Train Mean:", y_train.mean(), "Std:", y_train.std())
            print("Test Mean:", y_test.mean(), "Std:", y_test.std())


            df['Predicted C5TC'] = model.predict(X)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DataFrame –≤ Excel
            excel_file = BytesIO()
            with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Sheet1')
            excel_file.seek(0)

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å Excel",
                data=excel_file,
                file_name="data.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )



        # if flag1:
        #     if st.button("–£–¥–∞–ª–∏—Ç—å PMI –∏ BRAZIL-WORLD (–ù–∏–∑–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è)"):
        #         columns_to_exclude = ['PMI', 'BRAZIL-WORLD']
        #         df = df.drop(columns=columns_to_exclude)


        # # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DataFrame –≤ Excel
        # excel_file = BytesIO()
        # with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        #     df.to_excel(writer, index=False, sheet_name='Sheet1')
        # excel_file.seek(0)
        #
        # # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel
        # st.download_button(
        #     label="–°–∫–∞—á–∞—Ç—å Excel",
        #     data=excel_file,
        #     file_name="data.xlsx",
        #     mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        # )

